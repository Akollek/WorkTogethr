
script(src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML")


div.sidebar(style="padding-left:5px;") 
  h1
    | Moxedu
  ul
    li(ng-repeat="question in assignment_questions")
      button(ng-click="clickQuestion(question._id)") {{question._id}}
      | {{question}}

<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
div(ng-show="question_view")
  p question view
  | question is: {{question_id}}
  | chatroom is here
  | {{question_img}}
  | (placeholder)
  //-img(src="{{question_img}}", height="500px")

a(href="public/540c1c17e3be43a51afd8e26.pdf") pdf

div(ng-show="!question_view")
  p no question selected view

  br
  input#MathInput(onkeydown='UpdateMath(this.value)', size="27")
  input.btn(type="button" value="Send" style="padding-left:10px;")
  br
  p 

  #box.box(style='visibility: hidden;')
    #MathOutput.output $${}$$


  p no question selected view
  script
    //
      //  Use a closure to hide the local variables from the
      //  global namespace
      //
      (function () {
      var QUEUE = MathJax.Hub.queue;  // shorthand for the queue
      var math = null, box = null;    // the element jax for the math output, and the box it's in
      //
      //  Hide and show the box (so it doesn't flicker as much)
      //
      var HIDEBOX = function () {box.style.visibility = "hidden"}
      var SHOWBOX = function () {box.style.visibility = "visible"}
      //
      //  Get the element jax when MathJax has produced it.
      //
      QUEUE.Push(function () {
      math = MathJax.Hub.getAllJax("MathOutput")[0];
      box = document.getElementById("box");
      SHOWBOX(); // box is initially hidden so the braces don't show
      });
      //
      //  The onchange event handler that typesets the math entered
      //  by the user.  Hide the box, then typeset, then show it again
      //  so we don't see a flash as the math is cleared and replaced.
      //
      window.UpdateMath = function (TeX) {
      QUEUE.Push(HIDEBOX,["Text",math,"\\\displaystyle{"+TeX+"}"],SHOWBOX);
      }
      })();
div.col-lrg-12
  script(type='text/javascript').
    var options = {
      binder_name: "Moxedu",
      iframe: true,
      tagid4iframe: "container",
      iframewidth: "855px",
      iframeheight: "600px",
      autostart_meet: false,
      autostart_note: true,
      start_chat: function(event) {
      //alert("Chat started session Id: " + event.session_id);
      },
      start_meet: function(event) {
      alert("Meet started session key: " + event.session_key + " session id: " + event.session_id);
      },
      end_meet: function(event) {
      alert("Meet end event");
      },
      invite_member: function(event) {
      alert("Invite member into binder Id: " + event.binder_id);
      },
      request_note: function(event) {
      alert("Note start request");
      },
      error: function(event) {
      alert("Chat error code: " + event.error_code + " error message: " + event.error_message);
      }
      };
      Moxtra.chat(options);
